{"ast":null,"code":"import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n  constructor() {\n    super(...arguments);\n    this.type = \"svg\";\n    this.isSVGTag = false;\n  }\n\n  getBaseTargetFromProps(props, key) {\n    return props[key];\n  }\n\n  readValueFromInstance(instance, key) {\n    if (transformProps.has(key)) {\n      const defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    }\n\n    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n    return instance.getAttribute(key);\n  }\n\n  measureInstanceViewportBox() {\n    return createBox();\n  }\n\n  scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n  }\n\n  build(renderState, latestValues, options, props) {\n    buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n  }\n\n  renderInstance(instance, renderState, styleProp, projection) {\n    renderSVG(instance, renderState, styleProp, projection);\n  }\n\n  mount(instance) {\n    this.isSVGTag = isSVGTag(instance.tagName);\n    super.mount(instance);\n  }\n\n}\n\nexport { SVGVisualElement };","map":{"version":3,"names":["scrapeMotionValuesFromProps","DOMVisualElement","buildSVGAttrs","camelToDash","camelCaseAttributes","transformProps","renderSVG","getDefaultValueType","createBox","isSVGTag","SVGVisualElement","constructor","arguments","type","getBaseTargetFromProps","props","key","readValueFromInstance","instance","has","defaultType","default","getAttribute","measureInstanceViewportBox","prevProps","visualElement","build","renderState","latestValues","options","transformTemplate","renderInstance","styleProp","projection","mount","tagName"],"sources":["E:/socket stories/frontend/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs"],"sourcesContent":["import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,kCAA5C;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAASC,SAAT,QAA0B,sCAA1B;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,MAAMC,gBAAN,SAA+BT,gBAA/B,CAAgD;EAC5CU,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,IAAL,GAAY,KAAZ;IACA,KAAKJ,QAAL,GAAgB,KAAhB;EACH;;EACDK,sBAAsB,CAACC,KAAD,EAAQC,GAAR,EAAa;IAC/B,OAAOD,KAAK,CAACC,GAAD,CAAZ;EACH;;EACDC,qBAAqB,CAACC,QAAD,EAAWF,GAAX,EAAgB;IACjC,IAAIX,cAAc,CAACc,GAAf,CAAmBH,GAAnB,CAAJ,EAA6B;MACzB,MAAMI,WAAW,GAAGb,mBAAmB,CAACS,GAAD,CAAvC;MACA,OAAOI,WAAW,GAAGA,WAAW,CAACC,OAAZ,IAAuB,CAA1B,GAA8B,CAAhD;IACH;;IACDL,GAAG,GAAG,CAACZ,mBAAmB,CAACe,GAApB,CAAwBH,GAAxB,CAAD,GAAgCb,WAAW,CAACa,GAAD,CAA3C,GAAmDA,GAAzD;IACA,OAAOE,QAAQ,CAACI,YAAT,CAAsBN,GAAtB,CAAP;EACH;;EACDO,0BAA0B,GAAG;IACzB,OAAOf,SAAS,EAAhB;EACH;;EACDR,2BAA2B,CAACe,KAAD,EAAQS,SAAR,EAAmBC,aAAnB,EAAkC;IACzD,OAAOzB,2BAA2B,CAACe,KAAD,EAAQS,SAAR,EAAmBC,aAAnB,CAAlC;EACH;;EACDC,KAAK,CAACC,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCd,KAArC,EAA4C;IAC7Cb,aAAa,CAACyB,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqC,KAAKpB,QAA1C,EAAoDM,KAAK,CAACe,iBAA1D,CAAb;EACH;;EACDC,cAAc,CAACb,QAAD,EAAWS,WAAX,EAAwBK,SAAxB,EAAmCC,UAAnC,EAA+C;IACzD3B,SAAS,CAACY,QAAD,EAAWS,WAAX,EAAwBK,SAAxB,EAAmCC,UAAnC,CAAT;EACH;;EACDC,KAAK,CAAChB,QAAD,EAAW;IACZ,KAAKT,QAAL,GAAgBA,QAAQ,CAACS,QAAQ,CAACiB,OAAV,CAAxB;IACA,MAAMD,KAAN,CAAYhB,QAAZ;EACH;;AAhC2C;;AAmChD,SAASR,gBAAT"},"metadata":{},"sourceType":"module"}