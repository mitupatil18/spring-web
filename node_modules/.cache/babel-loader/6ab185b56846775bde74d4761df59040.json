{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\n\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nfunction animateTarget(visualElement, targetAndTransition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = targetAndTransition;\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  for (const key in target) {\n    const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n    const valueTarget = target[key];\n\n    if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n\n    let isHandoff = false;\n\n    if (window.HandoffAppearAnimations) {\n      const appearId = getOptimisedAppearId(visualElement);\n\n      if (appearId) {\n        const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          isHandoff = true;\n        }\n      }\n    }\n\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition, visualElement, isHandoff));\n    const animation = value.animation;\n\n    if (animation) {\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n        animation.then(() => willChange.remove(key));\n      }\n\n      animations.push(animation);\n    }\n  }\n\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      frame.update(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n      });\n    });\n  }\n\n  return animations;\n}\n\nexport { animateTarget };","map":{"version":3,"names":["transformProps","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","getOptimisedAppearId","frame","shouldBlockAnimation","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","targetAndTransition","delay","transitionOverride","type","_a","transition","getDefaultTransition","transitionEnd","target","willChange","getValue","animations","animationTypeState","animationState","getState","value","latestValues","valueTarget","undefined","valueTransition","elapsed","isHandoff","window","HandoffAppearAnimations","appearId","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all","update"],"sources":["E:/socket stories/frontend/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.HandoffAppearAnimations) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    isHandoff = true;\n                }\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n                animation.then(() => willChange.remove(key));\n            }\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uCAA/B;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,uBAAT,QAAwC,oCAAxC;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,oBAAT,QAAqC,uCAArC;AACA,SAASC,KAAT,QAAsB,2BAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,OAAiEC,GAAjE,EAAsE;EAAA,IAAxC;IAAEC,aAAF;IAAiBC;EAAjB,CAAwC;EAClE,MAAMC,WAAW,GAAGF,aAAa,CAACG,cAAd,CAA6BJ,GAA7B,KAAqCE,cAAc,CAACF,GAAD,CAAd,KAAwB,IAAjF;EACAE,cAAc,CAACF,GAAD,CAAd,GAAsB,KAAtB;EACA,OAAOG,WAAP;AACH;;AACD,SAASE,aAAT,CAAuBC,aAAvB,EAAsCC,mBAAtC,EAAyG;EAAA,IAA9C;IAAEC,KAAK,GAAG,CAAV;IAAaC,kBAAb;IAAiCC;EAAjC,CAA8C,uEAAJ,EAAI;;EACrG,IAAIC,EAAJ;;EACA,IAAI;IAAEC,UAAU,GAAGN,aAAa,CAACO,oBAAd,EAAf;IAAqDC,aAArD;IAAoE,GAAGC;EAAvE,IAAkFR,mBAAtF;EACA,MAAMS,UAAU,GAAGV,aAAa,CAACW,QAAd,CAAuB,YAAvB,CAAnB;EACA,IAAIR,kBAAJ,EACIG,UAAU,GAAGH,kBAAb;EACJ,MAAMS,UAAU,GAAG,EAAnB;EACA,MAAMC,kBAAkB,GAAGT,IAAI,IAC3BJ,aAAa,CAACc,cADS,IAEvBd,aAAa,CAACc,cAAd,CAA6BC,QAA7B,GAAwCX,IAAxC,CAFJ;;EAGA,KAAK,MAAMV,GAAX,IAAkBe,MAAlB,EAA0B;IACtB,MAAMO,KAAK,GAAGhB,aAAa,CAACW,QAAd,CAAuBjB,GAAvB,EAA4B,CAACW,EAAE,GAAGL,aAAa,CAACiB,YAAd,CAA2BvB,GAA3B,CAAN,MAA2C,IAA3C,IAAmDW,EAAE,KAAK,KAAK,CAA/D,GAAmEA,EAAnE,GAAwE,IAApG,CAAd;IACA,MAAMa,WAAW,GAAGT,MAAM,CAACf,GAAD,CAA1B;;IACA,IAAIwB,WAAW,KAAKC,SAAhB,IACCN,kBAAkB,IACfpB,oBAAoB,CAACoB,kBAAD,EAAqBnB,GAArB,CAF5B,EAEwD;MACpD;IACH;;IACD,MAAM0B,eAAe,GAAG;MACpBlB,KADoB;MAEpBmB,OAAO,EAAE,CAFW;MAGpB,GAAG/B,kBAAkB,CAACgB,UAAU,IAAI,EAAf,EAAmBZ,GAAnB;IAHD,CAAxB;IAKA;AACR;AACA;AACA;;IACQ,IAAI4B,SAAS,GAAG,KAAhB;;IACA,IAAIC,MAAM,CAACC,uBAAX,EAAoC;MAChC,MAAMC,QAAQ,GAAGlC,oBAAoB,CAACS,aAAD,CAArC;;MACA,IAAIyB,QAAJ,EAAc;QACV,MAAMJ,OAAO,GAAGE,MAAM,CAACC,uBAAP,CAA+BC,QAA/B,EAAyC/B,GAAzC,EAA8CsB,KAA9C,EAAqDxB,KAArD,CAAhB;;QACA,IAAI6B,OAAO,KAAK,IAAhB,EAAsB;UAClBD,eAAe,CAACC,OAAhB,GAA0BA,OAA1B;UACAC,SAAS,GAAG,IAAZ;QACH;MACJ;IACJ;;IACDN,KAAK,CAACU,KAAN,CAAYvC,kBAAkB,CAACO,GAAD,EAAMsB,KAAN,EAAaE,WAAb,EAA0BlB,aAAa,CAAC2B,kBAAd,IAAoCzC,cAAc,CAAC0C,GAAf,CAAmBlC,GAAnB,CAApC,GAClD;MAAEU,IAAI,EAAE;IAAR,CADkD,GAElDgB,eAFwB,EAEPpB,aAFO,EAEQsB,SAFR,CAA9B;IAGA,MAAMO,SAAS,GAAGb,KAAK,CAACa,SAAxB;;IACA,IAAIA,SAAJ,EAAe;MACX,IAAIzC,uBAAuB,CAACsB,UAAD,CAA3B,EAAyC;QACrCA,UAAU,CAACoB,GAAX,CAAepC,GAAf;QACAmC,SAAS,CAACE,IAAV,CAAe,MAAMrB,UAAU,CAACsB,MAAX,CAAkBtC,GAAlB,CAArB;MACH;;MACDkB,UAAU,CAACqB,IAAX,CAAgBJ,SAAhB;IACH;EACJ;;EACD,IAAIrB,aAAJ,EAAmB;IACf0B,OAAO,CAACC,GAAR,CAAYvB,UAAZ,EAAwBmB,IAAxB,CAA6B,MAAM;MAC/BvC,KAAK,CAAC4C,MAAN,CAAa,MAAM;QACf5B,aAAa,IAAInB,SAAS,CAACW,aAAD,EAAgBQ,aAAhB,CAA1B;MACH,CAFD;IAGH,CAJD;EAKH;;EACD,OAAOI,UAAP;AACH;;AAED,SAASb,aAAT"},"metadata":{},"sourceType":"module"}